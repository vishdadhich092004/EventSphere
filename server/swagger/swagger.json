{
    "openapi": "3.0.0",
    "info": {
        "title": "Event Management API",
        "description": "API documentation for Event Management System",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://event-sphere-roan.vercel.app/api",
            "description": "Production server"
        }
    ],
    "components": {
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        },
        "schemas": {
            "User": {
                "type": "object",
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "User's full name"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "User's email address"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "description": "User's hashed password"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "user",
                            "admin"
                        ],
                        "default": "user",
                        "description": "Role of the user"
                    },
                    "isDeleted": {
                        "type": "boolean",
                        "default": false,
                        "description": "Indicates if the user is soft-deleted"
                    },
                    "deletedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of deletion"
                    }
                }
            },
            "Event": {
                "type": "object",
                "required": [
                    "name",
                    "date",
                    "location",
                    "capacity",
                    "organiser"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Event name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Event description"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Event date and time"
                    },
                    "capacity": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "Maximum number of attendees"
                    },
                    "location": {
                        "type": "string",
                        "description": "Event location"
                    },
                    "organiser": {
                        "type": "string",
                        "description": "ID of the organiser (User)"
                    }
                }
            },
            "Registration": {
                "type": "object",
                "required": [
                    "event",
                    "user",
                    "status"
                ],
                "properties": {
                    "event": {
                        "type": "string",
                        "description": "ID of the event"
                    },
                    "user": {
                        "type": "string",
                        "description": "ID of the user"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "registered",
                            "cancelled"
                        ],
                        "default": "registered",
                        "description": "Registration status"
                    },
                    "registeredAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of registration"
                    },
                    "cancelledAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of cancellation"
                    },
                    "cancellationReason": {
                        "type": "string",
                        "description": "Reason for cancellation"
                    }
                }
            }
        }
    },
    "paths": {
        "/users/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Login user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful"
                    },
                    "401": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details retrieved successfully"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/events": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Create new event",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Event"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Event created successfully"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            },
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get all events",
                "responses": {
                    "200": {
                        "description": "List of events retrieved successfully"
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get event by ID",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event details retrieved successfully"
                    },
                    "404": {
                        "description": "Event not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Events"
                ],
                "summary": "Update event",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Event"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Event updated successfully"
                    },
                    "404": {
                        "description": "Event not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Events"
                ],
                "summary": "Delete event",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event deleted successfully"
                    },
                    "404": {
                        "description": "Event not found"
                    }
                }
            }
        },
        "/events/{id}/register": {
            "post": {
                "tags": [
                    "Event Registration"
                ],
                "summary": "Register for an event",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful"
                    },
                    "400": {
                        "description": "Already registered or event full"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Event Registration"
                ],
                "summary": "Cancel event registration",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration cancelled successfully"
                    },
                    "404": {
                        "description": "Registration not found"
                    }
                }
            }
        },
        "/events/{id}/attendees": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get event attendees",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of attendees retrieved successfully"
                    },
                    "404": {
                        "description": "Event not found"
                    }
                }
            }
        },
        "/analytics/events/popular": {
            "get": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Get popular events",
                "responses": {
                    "200": {
                        "description": "List of popular events retrieved successfully"
                    }
                }
            }
        },
        "/analytics/users/active": {
            "get": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Get most active users",
                "responses": {
                    "200": {
                        "description": "List of active users retrieved successfully"
                    }
                }
            }
        },
        "/analytics/events/{id}/stats": {
            "get": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Get detailed event statistics",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event statistics retrieved successfully"
                    },
                    "404": {
                        "description": "Event not found"
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get all users (Admin only)",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users retrieved successfully"
                    },
                    "403": {
                        "description": "Not authorized"
                    }
                }
            }
        },
        "/admin/events": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get all events (Admin only)",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events retrieved successfully"
                    },
                    "403": {
                        "description": "Not authorized"
                    }
                }
            }
        },
        "/admin/users/{id}": {
            "delete": {
                "tags": [
                    "Admin"
                ],
                "summary": "Delete user (Admin only)",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    }
}